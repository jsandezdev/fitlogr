generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "prisma-zod-generator"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum WeekDay {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

enum GoalType {
  Gain
  Lose
}

enum GoalFrequency {
  Revision
  Total
}

enum BodyPart {
  Neck
  Shoulders
  Chest
  Bicep
  Waist
  Hips
  Thigh
}

enum UnitOfTime {
  Day
  Week
  Month
  Year
}

enum ChallengeStatus {
  Active
  Canceled
  Finished
}

type BodyPartMeasurement {
  bodyPart BodyPart
  amount   Float
}

type BodyPartGoal {
  bodyPart        BodyPart
  type            GoalType
  amount          Float
  frequency       GoalFrequency
}

type WeightGoal {
  type            GoalType
  frequency       GoalFrequency
  amount          Float
}

model Account {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  lastName       String?
  email          String? @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  challenges     Challenge[]
  accounts       Account[]
  sessions       Session[]
}

model VerificationToken {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Challenge {
  id                               String @id @default(auto()) @map("_id") @db.ObjectId
  userId                           String @db.ObjectId
  name                             String
  startDate                        DateTime
  endDate                          DateTime
  revisionFrequencyNumber          Int
  revisionFrequencyUnitOfTime      String 
  includeRevisionBodyPhotos        Boolean
  includeRevisionBodyWeight        Boolean
  includeRevisionBodyParts         Boolean
  includeDietLog                   Boolean
  monthlyCheatMeals                Int?
  includeWeightGoal                Boolean
  includeBodyPartGoals             Boolean
  status                           ChallengeStatus
  weightGoal                       WeightGoal?
  bodyPartGoals                    Json?
  weeklyTrainingDays               WeekDay[]  

  createdAt                        DateTime @default(now())
  updatedAt                        DateTime @updatedAt  
  
  revisions                        Revision[]
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Revision {
  id                               String @id @default(auto()) @map("_id") @db.ObjectId
  challengeId                      String @db.ObjectId
  date                             DateTime
  frontPhoto                       String?
  sidePhoto                        String?
  backPhoto                        String?
  bodyWeight                       Float?
  bodyPartMeasurements             BodyPartMeasurement[]

  createdAt                        DateTime @default(now())
  updatedAt                        DateTime @updatedAt  

  challenge Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
}
