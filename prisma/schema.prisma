generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "prisma-zod-generator"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// enum WeekDay {
//   Monday = "1"
//   Tuesday = "2"
//   Wednesday = "3"
//   Thursday = "4"
//   Friday = "5"
//   Saturday = "6"
//   Sunday = "7"
// }

enum WeekDay {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

enum GoalType {
  Gain
  Lose
}

enum Measurement {
  Neck
  Shoulders
  Chest
  Bicep
  Waist
  Hips
  Thigh
}

enum UnitOfTime {
  Day
  Week
  Month
  Year
}

type MeasurementGoal {
  measurement         Measurement
  goalType            GoalType
  amount              Float
  frequencyAmount     Float
  frequencyUnitOfTime UnitOfTime
}

type WeightGoal {
  goalType            GoalType
  amount              Float
  frequencyAmount     Float
  frequencyUnitOfTime UnitOfTime
}

model Account {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String? @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  challenges    Challenge[]
  accounts      Account[]
  sessions      Session[]

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model VerificationToken {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Challenge {
  id                               String @id @default(auto()) @map("_id") @db.ObjectId
  userId                           String @db.ObjectId
  startDate                        DateTime
  endDate                          DateTime
  revisionFrequencyNumber          Int
  revisionFrequencyUnitOfTime      String 
  includeRevisionBodyPhotos        Boolean
  includeRevisionBodyWeight        Boolean
  includeRevisionBodyMeasurements  Boolean
  includeDietLog                   Boolean
  monthlyCheatMeals                Int
  includeGoals                     Boolean
  weightGoal                       WeightGoal
  measurementGoals                 MeasurementGoal[]
  weeklyTrainingDays               WeekDay[]  

  createdAt                        DateTime @default(now())
  updatedAt                        DateTime @updatedAt  
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// model BodyPart {
//   id   String   @id @default(auto()) @map("_id") @db.ObjectId
//   name String   @unique

//   challenges ChallengeBodyPart[]
// }

// model ChallengeBodyPart {
//   id          String   @id @default(auto()) @map("_id") @db.ObjectId
//   challengeId String   @db.ObjectId
//   bodyPartId  String   @db.ObjectId
  
//   challenge   Challenge @relation(fields: [challengeId], references: [id])
//   bodyPart    BodyPart  @relation(fields: [bodyPartId], references: [id])

//   @@unique([challengeId, bodyPartId])
// }